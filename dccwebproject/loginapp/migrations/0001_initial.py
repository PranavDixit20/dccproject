# Generated by Django 2.2.2 on 2020-09-07 19:59

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='coadmin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('co_name', models.CharField(max_length=200, null=True, verbose_name='Name')),
                ('co_address', models.TextField(blank=True, null=True, verbose_name='Address')),
                ('co_email', models.EmailField(max_length=70, null=True, verbose_name='E-mail')),
                ('contact_number', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Contact Number')),
                ('tell_no', models.CharField(blank=True, max_length=17, null=True, verbose_name='Telephone Number')),
                ('co_city', models.CharField(max_length=70, null=True, verbose_name='City')),
                ('branch_code', models.CharField(max_length=100, null=True, verbose_name='Branch Code')),
                ('co_gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female')], default=1, max_length=6, null=True, verbose_name='Gender')),
                ('co_bdate', models.DateTimeField(blank=True, null=True, verbose_name='Birth Date')),
                ('co_age', models.IntegerField(blank=True, null=True, verbose_name='Age')),
                ('co_joining_date', models.DateTimeField(blank=True, null=True, verbose_name='Joining Date')),
                ('co_qual', models.CharField(blank=True, max_length=50, null=True, verbose_name='Qualification')),
                ('co_designation', models.CharField(blank=True, max_length=50, null=True, verbose_name='Designation')),
                ('co_pass', models.CharField(blank=True, default='amc@123', max_length=16, null=True, verbose_name='Password')),
                ('co_conf_pass', models.CharField(blank=True, default='amc@123', max_length=16, null=True, verbose_name='Confirm Password')),
                ('co_status', models.CharField(blank=True, choices=[('Online', 'Online'), ('Offline', 'Offline')], default='Offline', max_length=12, null=True, verbose_name=' Status')),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_name', models.CharField(max_length=500, null=True)),
                ('customer_adrress', models.CharField(max_length=500, null=True)),
                ('customer_city', models.CharField(blank=True, max_length=500, null=True)),
                ('customer_pincode', models.IntegerField(blank=True, null=True)),
                ('cutomer_fax', models.CharField(blank=True, max_length=11, null=True)),
                ('customer_company_type', models.CharField(blank=True, max_length=50, null=True)),
                ('customer_doc', models.DateField(auto_now_add=True)),
                ('customer_email', models.EmailField(max_length=254, null=True)),
                ('customer_contact_no', models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('customer_agreement_from', models.DateField(null=True)),
                ('customer_agreement_to', models.DateField(null=True)),
                ('customer_agreement_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True)),
                ('customer_GSTIN_no', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message="GSTIN number must be entered in the format: '999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('customer_product', models.CharField(blank=True, max_length=40, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='engg',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('engg_id', models.CharField(max_length=10, null=True, verbose_name='Engineer id *')),
                ('engg_pic', models.ImageField(null=True, upload_to='co_pic/profile/', verbose_name='Engineer photo *')),
                ('engg_name', models.CharField(max_length=200, null=True, verbose_name='Engineer Name *')),
                ('engg_address', models.TextField(null=True, verbose_name='Engineer Address')),
                ('engg_permanent_address', models.TextField(blank=True, null=True, verbose_name='Engineer Permanent Address')),
                ('engg_email', models.EmailField(max_length=70, null=True, verbose_name='Engineer E-mail id')),
                ('engg_contact_number', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Engineer Contact Number')),
                ('engg_tell_no', models.CharField(blank=True, max_length=17, verbose_name='Engineer Telephone Number')),
                ('engg_city', models.CharField(max_length=70, null=True, verbose_name='Engineer City')),
                ('engg_branch_code', models.CharField(max_length=100, null=True, verbose_name='Engineer Branch Code')),
                ('engg_gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female')], default=1, max_length=12, null=True, verbose_name='Engineer Gender')),
                ('engg_bdate', models.DateField(blank=True, null=True, verbose_name='Engineer Birth Date')),
                ('engg_age', models.IntegerField(blank=True, null=True, verbose_name='Engineer Age')),
                ('engg_joining_date', models.DateField(blank=True, null=True, verbose_name='Engineer Joining Date')),
                ('engg_qual', models.CharField(blank=True, max_length=50, null=True, verbose_name='Engineer Qualification')),
                ('engg_designation', models.CharField(blank=True, max_length=50, null=True, verbose_name='Engineer Designation')),
                ('engg_skill', models.CharField(blank=True, choices=[('Hardware', 'Hardware'), ('Networking', 'Networking'), ('Software', 'Software')], default=1, max_length=20, null=True, verbose_name='Engineer Skill')),
                ('engg_pass', models.CharField(default='amc@123', max_length=16, null=True, verbose_name='Engineer Password')),
                ('engg_conf_pass', models.CharField(default='amc@123', max_length=16, null=True, verbose_name='Engineer Confirm Password')),
                ('engg_status', models.CharField(blank=True, choices=[('Online', 'Online'), ('Offline', 'Offline')], default=1, max_length=12, null=True, verbose_name='Engineer Status')),
                ('engg_lat', models.DecimalField(blank=True, decimal_places=4, max_digits=20, null=True)),
                ('engg_long', models.DecimalField(blank=True, decimal_places=4, max_digits=20, null=True)),
                ('battery_percentage', models.IntegerField(blank=True, null=True)),
                ('complaint_id', models.CharField(max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='enggperformance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('engg_id', models.IntegerField(blank=True, null=True)),
                ('calls_closed', models.IntegerField(blank=True, null=True)),
                ('avg_rating', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True)),
                ('mode_of_transport', models.CharField(blank=True, max_length=20, null=True)),
                ('total_distance_travelled', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True)),
                ('tickets', models.FileField(blank=True, null=True, upload_to='')),
                ('total_ticket_amnt', models.IntegerField(blank=True, null=True)),
                ('battery_percentage', models.IntegerField(blank=True, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=4, max_digits=20, null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=4, max_digits=20, null=True)),
                ('punchin_time', models.TimeField(blank=True, null=True)),
                ('punchout_time', models.TimeField(blank=True, null=True)),
                ('online_status', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='products',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_name', models.CharField(max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='stock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_name', models.CharField(max_length=20, null=True)),
                ('product_size', models.CharField(max_length=20, null=True)),
                ('product_quantity', models.IntegerField(null=True)),
                ('product_code', models.IntegerField(null=True)),
                ('product_recieved_date', models.DateField(null=True)),
                ('product_provider_name', models.CharField(max_length=20, null=True)),
                ('Total_product_quantity', models.IntegerField(null=True)),
                ('product_serial_no', models.IntegerField(null=True)),
                ('product_model', models.CharField(max_length=20, null=True)),
                ('product_model_id', models.IntegerField(null=True)),
                ('product_description', models.CharField(blank=True, max_length=500, null=True)),
                ('product_warranty', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='performance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_open', models.IntegerField(blank=True, null=True)),
                ('total_closed', models.IntegerField(blank=True, null=True)),
                ('total_pending', models.IntegerField(blank=True, null=True)),
                ('stars', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True)),
                ('r_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='loginapp.engg')),
            ],
        ),
        migrations.CreateModel(
            name='callallocate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=200, null=True)),
                ('complaint_no', models.CharField(blank=True, max_length=200, null=True)),
                ('comp_address', models.TextField(blank=True, null=True)),
                ('comp_email', models.CharField(blank=True, max_length=200, null=True)),
                ('phone_number', models.CharField(max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('product', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('start', models.DateTimeField(auto_now_add=True, null=True)),
                ('engg_contact', models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('call_status', models.CharField(blank=True, choices=[('Open', 'Open'), ('Closed', 'Closed'), ('Pending', 'Pending')], default='Open', max_length=7, null=True)),
                ('call_type', models.CharField(blank=True, choices=[('Hardware', 'Hardware'), ('Networking', 'Networking'), ('Software', 'Software')], default='Hardware', max_length=15, null=True)),
                ('cust_city', models.CharField(blank=True, max_length=20, null=True)),
                ('end', models.DateTimeField(blank=True, null=True)),
                ('call_tat', models.IntegerField(blank=True, null=True)),
                ('call_note', models.CharField(blank=True, max_length=100, null=True)),
                ('call_priority', models.CharField(blank=True, choices=[('High', 'High'), ('Medium', 'Medium'), ('Low', 'Low')], default='High', max_length=7, null=True)),
                ('caller_name', models.CharField(blank=True, max_length=50, null=True)),
                ('engineer_id', models.CharField(blank=True, max_length=10, null=True)),
                ('engg_name', models.CharField(blank=True, max_length=100, null=True)),
                ('engg_status', models.CharField(blank=True, choices=[('Engineer Assign', 'Engineer Assign'), ('Left for site', 'Left for site'), ('Left from site', 'Left from site'), ('Reached at site', 'Reached at site')], default='Engineer Assign', max_length=100, null=True)),
                ('engg_lat', models.DecimalField(blank=True, decimal_places=4, max_digits=20, null=True)),
                ('engg_long', models.DecimalField(blank=True, decimal_places=4, max_digits=20, null=True)),
                ('battery_percentage', models.IntegerField(blank=True, null=True)),
                ('engg_rating', models.CharField(blank=True, max_length=10, null=True)),
                ('engg_part_pic', models.ImageField(blank=True, null=True, upload_to='co_pic/part/')),
                ('engg_client_pic', models.ImageField(blank=True, null=True, upload_to='co_pic/')),
                ('client_sign_pic', models.ImageField(blank=True, null=True, upload_to='co_pic/sign/')),
                ('engg_complaint_note', models.CharField(blank=True, max_length=100, null=True)),
                ('engg_transport_type', models.CharField(blank=True, max_length=10, null=True)),
                ('engg_start_reading', models.CharField(blank=True, max_length=10, null=True)),
                ('engg_start_reading_pic', models.ImageField(blank=True, null=True, upload_to='co_pic/')),
                ('engg_end_reading', models.CharField(blank=True, max_length=10, null=True)),
                ('engg_end_reading_pic', models.ImageField(blank=True, null=True, upload_to='co_pic/')),
                ('engg_solve', models.CharField(blank=True, max_length=100, null=True)),
                ('engg_ticket_amnt', models.CharField(blank=True, max_length=10, null=True)),
                ('engg_total_distance', models.CharField(blank=True, max_length=10, null=True)),
                ('engg_bus_start', models.CharField(blank=True, max_length=10, null=True)),
                ('engg_bus_end', models.CharField(blank=True, max_length=10, null=True)),
                ('engg_bus_ticket_pic', models.ImageField(blank=True, null=True, upload_to='co_pic/')),
                ('engg_bike_no', models.CharField(blank=True, max_length=10, null=True)),
                ('engg_part_name', models.CharField(blank=True, max_length=10, null=True)),
                ('engg_part_no', models.CharField(blank=True, max_length=30, null=True)),
                ('engg_feedback', models.CharField(blank=True, max_length=200, null=True)),
                ('comp_rating', models.CharField(blank=True, max_length=10, null=True)),
                ('comp_feedback', models.CharField(blank=True, max_length=200, null=True)),
                ('customer_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='loginapp.Customer')),
                ('engg_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='loginapp.engg')),
            ],
        ),
    ]
